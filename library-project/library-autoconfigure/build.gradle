dependencies {
    compileOnly 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure'


    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"

    implementation("org.apache.httpcomponents:httpclient")
    implementation 'javax.persistence:javax.persistence-api'
    implementation project(':library-shared')
    implementation("org.redisson:redisson-spring-boot-starter:3.45.1") {
        exclude group: 'org.redisson', module: 'redisson-spring-data-34'
    }
    implementation "org.redisson:redisson-spring-data-27:3.45.1"
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation("org.apache.commons:commons-pool2")
    implementation("io.netty:netty-transport-native-unix-common")
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.77.Final:osx-aarch_64'

//    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
}

publishing {
    publications {
        maven(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            groupId = group
            artifactId = project.name
            version = version
            from components.java
        }
    }
}